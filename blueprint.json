{"software":{"name":"mongoexpress","major":null,"minor":1,"release_level":"Alpha","patch":null,"license_name":"mit","license_label":"MIT","license_sourceurl":"https://opensource.org/licenses/MIT","full_title":"mongo-express","short_title":"mongo-express","description":"Web-based MongoDB admin interface ","icon_url":"","home_page_url":"","support_page_url":"","about":"","language":"node","framework":"node","deployment_type":"web","web_root_directory":"","first_run_url":"","publisher":"engines","blocking_worker_name":null,"required_memory":256,"recommended_memory":385,"http_protocol":"http_and_https","framework_port_overide":8081,"custom_start_script":"#!/bin/bash\r\nPID_FILE=/tmp/pid\r\nexport PID_FILE\r\n. /home/trap/sh\r\ncp /home/app/config.js  /usr/local/lib/node_modules/mongo-express/ \r\n/usr/local/bin/mongo-express     \u0026\r\necho $! \u003e/tmp/pid\r\ntouch /engines/var/run/flags/startup_complete","custom_install_script":"#!/bin/bash\r\ncd /home/app\r\nnpm install -g mongo-express\r\ncp /home/app/config.js  /usr/local/lib/node_modules/mongo-express/","custom_post_install_script":"","service_configurations":[{"publisher_namespace":"EnginesSystem","type_path":"database/nosql/mongo","variables":{"rails_flavor":"mongodb","database_host":"_Engines_System(mongo_host)","database_name":"_Engines_Builder(engine_name)","db_password":"_Engines_System(random(10))","db_username":"_Engines_Builder(engine_name)"}},{"publisher_namespace":"EnginesSystem","type_path":"filesystem/local/filesystem","variables":{"user":"_Engines_Builder(data_uid)","group":"_Engines_Builder(data_gid)","service_name":"_Engines_Builder(engine_name)","volume_src":"/home/fs/config","engine_path":" ","permissions":"rw"}}],"persistent_directories":[],"replacement_strings":[],"persistent_files":[{"path":"app/config.js"}],"installed_packages":[],"system_packages":[],"workers":[],"ports":[],"external_repositories":[],"rake_tasks":[],"template_files":[{"title":"config.js","path":"app/config.js","content":"'use strict';\r\n\r\nvar mongo;\r\nvar url = require('url');\r\n\r\nif (typeof process.env.MONGODB_PORT === 'string') {\r\n  var mongoConnection = url.parse(process.env.MONGODB_PORT);\r\n  process.env.ME_CONFIG_MONGODB_SERVER  = mongoConnection.hostname;\r\n  process.env.ME_CONFIG_MONGODB_PORT    = mongoConnection.port;\r\n}\r\n\r\n// Accesing Bluemix variable to get MongoDB info\r\nif (process.env.VCAP_SERVICES) {\r\n  var dbLabel = 'mongodb-2.4';\r\n  var env = JSON.parse(process.env.VCAP_SERVICES);\r\n  if (env[dbLabel]) {\r\n    mongo = env[dbLabel][0].credentials;\r\n  }\r\n} else {\r\n  mongo = {\r\n    db:       '_Engines_Environment(dbname)',\r\n    host:     '_Engines_Environment(dbhost)',\r\n    password: '_Engines_Environment(dbpasswd)',\r\n    port:     27017,\r\n    ssl:      false,\r\n    url:      'mongodb://_Engines_Environment(dbhost):27017/_Engines_Environment(dbname)',\r\n    username: '_Engines_Environment(dbuser)',\r\n  };\r\n}\r\n\r\nmodule.exports = {\r\n  mongodb: {\r\n    server: process.env.ME_CONFIG_MONGODB_SERVER  || mongo.host,\r\n    port:   process.env.ME_CONFIG_MONGODB_PORT    || mongo.port,\r\n\r\n    //ssl: connect to the server using secure SSL\r\n    ssl: process.env.ME_CONFIG_MONGODB_SSL || mongo.ssl,\r\n\r\n    //sslValidate: validate mongod server certificate against CA\r\n    sslValidate: process.env.ME_CONFIG_MONGODB_SSLVALIDATE || true,\r\n\r\n    //sslCA: array of valid CA certificates\r\n    sslCA:  [],\r\n //autoReconnect: automatically reconnect if connection is lost\r\n    autoReconnect: true,\r\n\r\n    //poolSize: size of connection pool (number of connections to use)\r\n    poolSize: 4,\r\n\r\n    //set admin to true if you want to turn on admin features\r\n    //if admin is true, the auth list below will be ignored\r\n    //if admin is true, you will need to enter an admin username/password below (if it is needed)\r\n    admin: process.env.ME_CONFIG_MONGODB_ENABLE_ADMIN ? process.env.ME_CONFIG_MONGODB_ENABLE_ADMIN.toLowerCase() === 'true' : false,\r\n\r\n    // \u003e\u003e\u003e\u003e  If you are using regular accounts, fill out auth details in the section below\r\n    // \u003e\u003e\u003e\u003e  If you have admin auth, leave this section empty and skip to the next section\r\n    auth: [\r\n      /*\r\n       * Add the name, username, and password of the databases you want to connect to\r\n       * Add as many databases as you want!\r\n       */\r\n      {\r\n        database: process.env.ME_CONFIG_MONGODB_AUTH_DATABASE || mongo.db,\r\n        username: process.env.ME_CONFIG_MONGODB_AUTH_USERNAME || mongo.username,\r\n        password: process.env.ME_CONFIG_MONGODB_AUTH_PASSWORD || mongo.password,\r\n      },\r\n    ],\r\n\r\n    //  \u003e\u003e\u003e\u003e  If you are using an admin mongodb account, or no admin account exists, fill out section below\r\n    //  \u003e\u003e\u003e\u003e  Using an admin account allows you to view and edit all databases, and view stats\r\n\r\n    //leave username and password empty if no admin account exists\r\n    adminUsername: process.env.ME_CONFIG_MONGODB_ADMINUSERNAME || '',\r\n    adminPassword: process.env.ME_CONFIG_MONGODB_ADMINPASSWORD || '',\r\n\r\n    //whitelist: hide all databases except the ones in this list  (empty list for no whitelist)\r\n    whitelist: [],\r\n\r\n    //blacklist: hide databases listed in the blacklist (empty list for no blacklist)\r\n    blacklist: [],\r\n  },\r\n\r\n  site: {\r\n    // baseUrl: the URL that mongo express will be located at - Remember to add the forward slash at the start and end!\r\n    baseUrl: process.env.ME_CONFIG_SITE_BASEURL || '/',\r\n    cookieKeyName: 'mongo-express',\r\n    cookieSecret:     process.env.ME_CONFIG_SITE_COOKIESECRET   || '_Engines_System(random(14))',\r\n  host:             process.env.VCAP_APP_HOST                 || '0.0.0.0',\r\n    port:             process.env.VCAP_APP_PORT                 || 8081,\r\n    requestSizeLimit: process.env.ME_CONFIG_REQUEST_SIZE        || '50mb',\r\n    sessionSecret:    process.env.ME_CONFIG_SITE_SESSIONSECRET  || '_Engines_System(random(14))',\r\n    sslCert:          process.env.ME_CONFIG_SITE_SSL_CRT_PATH   || '',\r\n    sslEnabled:       process.env.ME_CONFIG_SITE_SSL_ENABLED    || false,\r\n    sslKey:           process.env.ME_CONFIG_SITE_SSL_KEY_PATH   || '',\r\n  },\r\n\r\n  //set useBasicAuth to true if you want to authehticate mongo-express loggins\r\n  //if admin is false, the basicAuthInfo list below will be ignored\r\n  //this will be true unless ME_CONFIG_BASICAUTH_USERNAME is set and is the empty string\r\n  useBasicAuth: process.env.ME_CONFIG_BASICAUTH_USERNAME !== '',\r\n\r\n  basicAuth: {\r\n    username: process.env.ME_CONFIG_BASICAUTH_USERNAME || 'admin',\r\n    password: process.env.ME_CONFIG_BASICAUTH_PASSWORD || '_Engines_Environment(admin_password)',\r\n  },\r\n\r\n  options: {\r\n    // Display startup text on console\r\n    console: true,\r\n\r\n    //documentsPerPage: how many documents you want to see at once in collection view\r\n    documentsPerPage: 10,\r\n\r\n    //editorTheme: Name of the theme you want to use for displaying documents\r\n    //See http://codemirror.net/demo/theme.html for all examples\r\n    editorTheme: process.env.ME_CONFIG_OPTIONS_EDITORTHEME || 'rubyblue',\r\n\r\n    // Maximum size of a single property \u0026 single row\r\n    // Reduces the risk of sending a huge amount of data when viewing collections\r\n    maxPropSize: (100 * 1000),  // default 100KB\r\n    maxRowSize: (1000 * 1000),  // default 1MB\r\n\r\n    //The options below aren't being used yet\r\n\r\n    //cmdType: the type of command line you want mongo express to run\r\n    //values: eval, subprocess\r\n    //  eval - uses db.eval. commands block, so only use this if you have to\r\n    //  subprocess - spawns a mongo command line as a subprocess and pipes output to mongo express\r\n    cmdType: 'eval',\r\n\r\n    //subprocessTimeout: number of seconds of non-interaction before a subprocess is shut down\r\n  // Reduces the risk of sending a huge amount of data when viewing collections\r\n    maxPropSize: (100 * 1000),  // default 100KB\r\n    maxRowSize: (1000 * 1000),  // default 1MB\r\n\r\n    //The options below aren't being used yet\r\n\r\n    //cmdType: the type of command line you want mongo express to run\r\n    //values: eval, subprocess\r\n    //  eval - uses db.eval. commands block, so only use this if you have to\r\n    //  subprocess - spawns a mongo command line as a subprocess and pipes output to mongo express\r\n    cmdType: 'eval',\r\n\r\n    //subprocessTimeout: number of seconds of non-interaction before a subprocess is shut down\r\n    subprocessTimeout: 300,\r\n\r\n    //readOnly: if readOnly is true, components of writing are not visible.\r\n    readOnly: false,\r\n\r\n    //collapsibleJSON: if set to true, jsons will be displayed collapsible\r\n    collapsibleJSON: true,\r\n\r\n    //collapsibleJSONDefaultUnfold: if collapsibleJSON is set to `true`, this defines default level\r\n    //  to which JSONs are displayed unfolded; use number or \"all\" to unfold all levels\r\n    collapsibleJSONDefaultUnfold: 1,\r\n\r\n    //gridFSEnabled: if gridFSEnabled is set to 'true', you will be able to manage uploaded files ( ak. grids, gridFS )\r\n    gridFSEnabled: false,\r\n  },\r\n\r\n  // Specify the default keyname that should be picked from a document to display in collections list.\r\n  // Keynames can be specified for every database and collection.\r\n  // If no keyname is specified, it defaults to '_id', which is a mandatory field.\r\n  // For Example :\r\n  // defaultKeyNames{\r\n  //   \"world_db\":{  //Database Name\r\n  //     \"continent\":\"cont_name\", // collection:field\r\n  //     \"country\":\"country_name\",\r\n  //     \"city\":\"name\"\r\n  //   }\r\n  // }\r\n  defaultKeyNames: {\r\n\r\n  },\r\n};\r\n"}],"file_write_permissions":[],"custom_php_inis":[],"apache_htaccess_files":[],"apache_httpd_configurations":[],"modules":[],"variables":[{"name":"Engines_Debug_Run","value":"true","label":"","field_type":"","select_collection":"","tooltip":"","hint":"","placeholder":"","comment":"","regex_validator":"","regex_invalid_message":"","mandatory":true,"ask_at_build_time":false,"build_time_only":false,"immutable":false},{"name":"DEBUG","value":"true","label":"","field_type":"","select_collection":"","tooltip":"","hint":"","placeholder":"","comment":"","regex_validator":"","regex_invalid_message":"","mandatory":false,"ask_at_build_time":false,"build_time_only":false,"immutable":false},{"name":"admin_password","value":"","label":"admin password","field_type":"password","select_collection":"","tooltip":"","hint":"","placeholder":"","comment":"","regex_validator":"","regex_invalid_message":"","mandatory":true,"ask_at_build_time":true,"build_time_only":true,"immutable":false}],"component_sources":[],"component_path":"","extract_components":false,"installation_report_template":"","continuous_deployment":false,"database_seed_file":"","actionators":{}}}